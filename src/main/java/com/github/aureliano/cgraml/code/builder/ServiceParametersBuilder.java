package com.github.aureliano.cgraml.code.builder;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

import com.github.aureliano.cgraml.code.gen.ServiceParametersInterfaceGenerator;
import com.github.aureliano.cgraml.code.meta.ActionMeta;
import com.github.aureliano.cgraml.code.meta.ClassMeta;
import com.github.aureliano.cgraml.code.meta.FieldMeta;
import com.github.aureliano.cgraml.code.meta.MethodMeta;
import com.github.aureliano.cgraml.code.meta.ServiceMeta;
import com.github.aureliano.cgraml.code.meta.Visibility;
import com.github.aureliano.cgraml.helper.CodeBuilderHelper;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;

public class ServiceParametersBuilder implements IBuilder {

	private ClassMeta clazz;
	private static final Set<String> GENERATED_CLASSES = new HashSet<String>();
	
	public ServiceParametersBuilder() {
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceParametersBuilder parse(String pkg, String entity, Object resource) {
		ServiceMeta service = (ServiceMeta) resource;
		
		this.clazz = new ClassMeta()
			.withPackageName(pkg + ".parameters")
			.withJavaDoc("Generated by cgraml-maven-plugin.")
			.withClassName(CodeBuilderHelper.sanitizedTypeName(service.getUri()) + "Parameters")
			.addInterface(pkg + ".parameters." + ServiceParametersInterfaceGenerator.CLASS_NAME);
	
		if (GENERATED_CLASSES.contains(this.clazz.getCanonicalClassName())) {
			throw new IllegalArgumentException("Class " + this.clazz.getCanonicalClassName() + " was already generated before. Skipping!");
		}
		
		ActionMeta action = CodeBuilderHelper.getGetAction(service);
		if (action == null) {
			throw new IllegalArgumentException("Service " + service.getUri() + " does not have a GET method. Skipping!");
		} else if (action.getParameters().isEmpty()) {
			throw new IllegalArgumentException("GET method of service '" + service.getUri() + "' does not have any parameters. Skipping!");
		}
		
		this.addAttributesToClass(action);
		this.addAccessorMethods();
		this.addInheritedMethodsImplementation();

		GENERATED_CLASSES.add(this.clazz.getCanonicalClassName());
		return this;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceParametersBuilder build() {
		this.buildJavaClass();
		return this;
	}
	
	private void buildJavaClass() {
		try {
			JCodeModel codeModel = new JCodeModel();
			JDefinedClass definedClass = codeModel._class(this.clazz.getCanonicalClassName());
			definedClass.javadoc().append(this.clazz.getJavaDoc());
			
			for (String interfaceName : this.clazz.getInterfaces()) {
				definedClass._implements(codeModel.ref(interfaceName));
			}
			
			this.appendClassAttributes(codeModel, definedClass);
			this.appendClassMethods(codeModel, definedClass);
			
			codeModel.build(new File("src/main/java"));
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	private String getAbstractMethodsBody(MethodMeta method) {
		if ("getPages".equals(method.getName())) {
			return "return this.pages;";
		} else if ("withPages".equals(method.getName())) {
			return "this.pages = pages; return this;";
		} else if ("getStart".equals(method.getName())) {
			return "return this.start;";
		} else if ("withStart".equals(method.getName())) {
			return "this.start = start; return this;";
		}
		
		return null;
	}

	private void appendClassAttributes(JCodeModel codeModel, JDefinedClass definedClass) {
		for (FieldMeta field : this.clazz.getFields()) {
			CodeBuilderHelper.addAttributeToClass(codeModel, definedClass, field);
		}
	}

	private void appendClassMethods(JCodeModel codeModel, JDefinedClass definedClass) {
		for (MethodMeta method : this.clazz.getMethods()) {
			CodeBuilderHelper.addMethodToClass(codeModel, definedClass, method);
		}
	}

	private void addAccessorMethods() {
		for (FieldMeta field : this.clazz.getFields()) {
			this.clazz.addMethod(CodeBuilderHelper.createGetterMethod(field));
			this.clazz.addMethod(CodeBuilderHelper.createBuilderMethod(this.clazz.getClassName(), field));
		}
	}

	private void addInheritedMethodsImplementation() {
		for (MethodMeta m : ServiceParametersInterfaceBuilder.getAbstractMethods()) {
			MethodMeta method = m.clone();
			if (method.getReturnType().equals(ServiceParametersInterfaceGenerator.CLASS_NAME)) {
				method.setReturnType(this.clazz.getClassName());
			}
			method.setBody(this.getAbstractMethodsBody(method));
			
			this.clazz.getMethods().remove(method);
			this.clazz.addMethod(method);
		}
	}

	private void addAttributesToClass(ActionMeta action) {
		for (FieldMeta field : action.getParameters()) {
			field.setVisibility(Visibility.PRIVATE);
			this.clazz.addField(field);
		}
	}
	
	public ClassMeta getClazz() {
		return clazz;
	}
	
	public ServiceParametersBuilder withClazz(ClassMeta clazz) {
		this.clazz = clazz;
		return this;
	}
}