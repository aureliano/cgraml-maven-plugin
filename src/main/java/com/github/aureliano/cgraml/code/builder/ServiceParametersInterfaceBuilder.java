package com.github.aureliano.cgraml.code.builder;

import java.io.File;

import com.github.aureliano.cgraml.code.gen.ServiceParametersInterfaceGenerator;
import com.github.aureliano.cgraml.code.meta.ClassMeta;
import com.github.aureliano.cgraml.code.meta.FieldMeta;
import com.github.aureliano.cgraml.code.meta.MethodMeta;
import com.github.aureliano.cgraml.code.meta.Visibility;
import com.github.aureliano.cgraml.helper.CodeBuilderHelper;
import com.sun.codemodel.ClassType;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;

public class ServiceParametersInterfaceBuilder implements IBuilder {
	
	private ClassMeta clazz;
	private static final MethodMeta[] ABSTRACT_METHODS;
	
	static {
		ABSTRACT_METHODS = new MethodMeta[] {
			createGetPagesMethod(),
			createWithPagesMethod(),
			createGetStartMethod(),
			createWithStartMethod()
		};
	}

	public ServiceParametersInterfaceBuilder() {
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceParametersInterfaceBuilder parse(String pkg, String entity, Object resource) {
		String javaDoc = "Generated by srvraml-maven-plugin.\n\nDefine a type for API service parameters.";
		
		this.clazz = new ClassMeta()
			.withPackageName(pkg)
			.withJavaDoc(javaDoc)
			.withClassName(entity);
		
		for (MethodMeta method : ABSTRACT_METHODS) {
			this.clazz.addMethod(method);
		}
		
		return this;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceParametersInterfaceBuilder build() {
		this.buildJavaClass();
		return this;
	}
	
	private void buildJavaClass() {
		try {
			JCodeModel codeModel = new JCodeModel();
			JDefinedClass definedClass = codeModel._class(this.clazz.getCanonicalClassName(), ClassType.INTERFACE);
			definedClass.javadoc().append(this.clazz.getJavaDoc());
			
			this.appendClassMethods(codeModel, definedClass);
			
			codeModel.build(new File("src/main/java"));
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	private void appendClassMethods(JCodeModel codeModel, JDefinedClass definedClass) {
		for (MethodMeta method : this.clazz.getMethods()) {
			CodeBuilderHelper.addMethodToClass(codeModel, definedClass, method);
		}
	}
	
	private static MethodMeta createGetPagesMethod() {
		MethodMeta method = new MethodMeta();
		
		method.setName("getPages");
		method.setVisibility(Visibility.PUBLIC);
		method.setReturnType(Integer.class.getName());
		
		return method;
	}
	
	private static MethodMeta createWithPagesMethod() {
		MethodMeta method = new MethodMeta();
		
		method.setName("withPages");
		method.setVisibility(Visibility.PUBLIC);
		method.setReturnType(ServiceParametersInterfaceGenerator.CLASS_NAME);
		
		FieldMeta param = new FieldMeta();
		param.setName("pages");
		param.setType(Integer.class.getName());
		
		method.addParameter(param);
		
		return method;
	}
	
	private static MethodMeta createGetStartMethod() {
		MethodMeta method = new MethodMeta();
		
		method.setName("getStart");
		method.setVisibility(Visibility.PUBLIC);
		method.setReturnType(Integer.class.getName());
		
		return method;
	}
	
	private static MethodMeta createWithStartMethod() {
		MethodMeta method = new MethodMeta();
		
		method.setName("withStart");
		method.setVisibility(Visibility.PUBLIC);
		method.setReturnType(ServiceParametersInterfaceGenerator.CLASS_NAME);
		
		FieldMeta param = new FieldMeta();
		param.setName("start");
		param.setType(Integer.class.getName());
		
		method.addParameter(param);
		
		return method;
	}
	
	public static MethodMeta[] getAbstractMethods() {
		return ABSTRACT_METHODS;
	}
	
	public ClassMeta getClazz() {
		return clazz;
	}
	
	public ServiceParametersInterfaceBuilder withClazz(ClassMeta clazz) {
		this.clazz = clazz;
		return this;
	}
}