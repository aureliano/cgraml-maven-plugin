package com.github.aureliano.srvraml.code.builder;

import java.io.File;

import org.apache.commons.lang.StringUtils;

import com.github.aureliano.srvraml.code.meta.ClassMeta;
import com.github.aureliano.srvraml.code.meta.MethodMeta;
import com.github.aureliano.srvraml.code.meta.ServiceMeta;
import com.github.aureliano.srvraml.code.meta.Visibility;
import com.github.aureliano.srvraml.helper.CodeBuilderHelper;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;

public class ApiMapServicesBuilder implements IBuilder {

	private ClassMeta clazz;
	
	public ApiMapServicesBuilder() {
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public ApiMapServicesBuilder parse(String pkg, String entity, Object resource) {
		ServiceMeta[] resources = (ServiceMeta[]) resource;
		
		this.clazz = new ClassMeta()
			.withPackageName(pkg + ".service")
			.withJavaDoc("Generated by srvraml-maven-plugin.")
			.withClassName(StringUtils.capitalize(entity) + "Service");

		for (ServiceMeta service : resources) {
			this.addServiceMethod(service);
		}
		
		return this;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ApiMapServicesBuilder build() {
		this.buildJavaClass();
		return this;
	}
	
	private void buildJavaClass() {
		try {
			JCodeModel codeModel = new JCodeModel();
			JDefinedClass definedClass = codeModel._class(this.clazz.getCanonicalClassName());
			definedClass.javadoc().append(this.clazz.getJavaDoc());
			
			this.appendClassMethods(codeModel, definedClass);
			
			codeModel.build(new File("src/main/java"));
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	private void appendClassMethods(JCodeModel codeModel, JDefinedClass definedClass) {
		for (MethodMeta method : this.clazz.getMethods()) {
			CodeBuilderHelper.addMethodToClass(codeModel, definedClass, method);
		}
	}

	private void addServiceMethod(ServiceMeta service) {
		MethodMeta method = new MethodMeta();
		String name = CodeBuilderHelper.sanitizedTypeName(service.getUri());
		method.setReturnType(name + "Service");
		
		name = name.substring(0, 1).toLowerCase() + name.substring(1);
		method.setName(name);
		method.setVisibility(Visibility.PUBLIC);
		method.setStaticMethod(true);
		
		method.setBody(String.format("return new %s(\"\");", (StringUtils.capitalize(name) + "Service")));
		this.clazz.addMethod(method);
	}
	
	public ClassMeta getClazz() {
		return clazz;
	}
	
	public ApiMapServicesBuilder withClazz(ClassMeta clazz) {
		this.clazz = clazz;
		return this;
	}
}