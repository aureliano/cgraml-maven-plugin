package com.github.aureliano.srvraml.code.builder;

import java.io.File;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;

import com.github.aureliano.srvraml.code.meta.ActionMeta;
import com.github.aureliano.srvraml.code.meta.ClassMeta;
import com.github.aureliano.srvraml.code.meta.FieldMeta;
import com.github.aureliano.srvraml.code.meta.MethodMeta;
import com.github.aureliano.srvraml.code.meta.ServiceMeta;
import com.github.aureliano.srvraml.code.meta.Visibility;
import com.github.aureliano.srvraml.helper.CodeBuilderHelper;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JMethod;

public class ServiceBuilder implements IBuilder {

	private ClassMeta clazz;
	private String serviceUri;
	private static final Set<String> GENERATED_CLASSES = new HashSet<String>();
	
	public ServiceBuilder() {
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceBuilder parse(String pkg, String entity, Object resource) {
		ServiceMeta service = (ServiceMeta) resource;
		this.serviceUri = service.getUri().substring(service.getUri().lastIndexOf("/"));
		
		this.clazz = new ClassMeta()
			.withPackageName(pkg + ".service")
			.withJavaDoc("Generated by srvraml-maven-plugin.")
			.withClassName(CodeBuilderHelper.sanitizedTypeName(service.getUri()) + "Service");
		
		if (GENERATED_CLASSES.contains(this.clazz.getCanonicalClassName())) {
			throw new IllegalArgumentException("Class " + this.clazz.getCanonicalClassName() + " was already generated before. Skipping!");
		}
		
		this.addUrlAttributeToClass();
		this.addAttributeToClassIfParameterizedResource(service);
		this.addAttributesToClass(service);		
		
		this.addServiceMethodsToClass(service);
		this.addHttpAccessMethodsToClass(pkg + ".model", service);
		
		GENERATED_CLASSES.add(this.clazz.getCanonicalClassName());
		return this;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceBuilder build() {
		this.buildJavaClass();
		return this;
	}
	
	private void buildJavaClass() {
		try {
			JCodeModel codeModel = new JCodeModel();
			JDefinedClass definedClass = codeModel._class(this.clazz.getCanonicalClassName());
			definedClass.javadoc().append(this.clazz.getJavaDoc());
			
			JMethod constructor = definedClass.constructor(Visibility.PUBLIC.getMod());
			constructor.param(String.class, "url");
			constructor.body().directStatement("this.url = ((url == null || url == \"\") ? \"\" : url) +  \"" + this.serviceUri + "\";");
			
			this.appendClassAttributes(codeModel, definedClass);
			this.appendClassMethods(codeModel, definedClass);
			
			codeModel.build(new File("src/main/java"));
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	private void appendClassAttributes(JCodeModel codeModel, JDefinedClass definedClass) {
		for (FieldMeta field : this.clazz.getFields()) {
			CodeBuilderHelper.addAttributeToClass(codeModel, definedClass, field);
		}
	}

	private void appendClassMethods(JCodeModel codeModel, JDefinedClass definedClass) {
		for (MethodMeta method : this.clazz.getMethods()) {
			CodeBuilderHelper.addMethodToClass(codeModel, definedClass, method);
		}
	}

	private void addAttributesToClass(ServiceMeta service) {
		for (ActionMeta action : service.getActions()) {
			for (FieldMeta field: action.getParameters()) {
				field.setVisibility(Visibility.PRIVATE);
				this.clazz.addField(field);
				this.clazz.addMethod(CodeBuilderHelper.createGetterMethod(field));
				this.clazz.addMethod(CodeBuilderHelper.createBuilderMethod(this.clazz.getClassName(), field));
			}
		}
	}

	private void addUrlAttributeToClass() {
		FieldMeta field = new FieldMeta();
		field.setName("url");
		field.setType(String.class.getName());
		field.setVisibility(Visibility.PRIVATE);
		
		this.clazz.addField(field);
		this.clazz.addMethod(CodeBuilderHelper.createGetterMethod(field));
	}
	
	private void addAttributeToClassIfParameterizedResource(ServiceMeta service) {
		Matcher matcher = Pattern.compile("/?\\{[\\w\\d]+\\}$").matcher(service.getUri());
		if (!matcher.find()) {
			return;
		}
		
		FieldMeta field = new FieldMeta();
		String name = CodeBuilderHelper.sanitizedTypeName(service.getUri());
		name = name.substring(0, 1).toLowerCase() + name.substring(1);
		
		field.setName(name);
		field.setType(String.class.getName());
		field.setVisibility(Visibility.PRIVATE);
		
		this.clazz.addField(field);
		
		MethodMeta setter = CodeBuilderHelper.createSetterMethod(field);
		String body = new StringBuilder()
			.append(String.format("if (%s != null && %s != \"\") {", field.getName(), field.getName()))
			.append("\n" + CodeBuilderHelper.tabulation(3))
			.append("this.url = this.url.substring(0, this.url.lastIndexOf(\"/\")) + \"/\" + " + field.getName() + ";")
			.append("\n" + CodeBuilderHelper.tabulation(3))
			.append(String.format("this.%s = %s;", field.getName(), field.getName()))
			.append("\n" + CodeBuilderHelper.tabulation(2)).append("}")
			.toString();
		setter.setBody(body);
		
		this.clazz.addMethod(setter);
		this.clazz.addMethod(CodeBuilderHelper.createGetterMethod(field));
	}

	private void addServiceMethodsToClass(ServiceMeta service) {
		if (service.getNextServices().isEmpty()) {
			return;
		}
		
		for (ServiceMeta s : service.getNextServices()) {
			MethodMeta method = new MethodMeta();
			
			String name = CodeBuilderHelper.sanitizedTypeName(s.getUri());
			method.setReturnType(name + "Service");
			
			name = name.substring(0, 1).toLowerCase() + name.substring(1);
			method.setName(name);
			method.setVisibility(Visibility.PUBLIC);
			
			Matcher matcher = Pattern.compile("/?\\{[\\w\\d]+\\}$").matcher(s.getUri());
			if (matcher.find()) {
				FieldMeta field = new FieldMeta();
				field.setName(method.getName());
				field.setType(String.class.getName());
				
				method.addParameter(field);
			}				
			
			method.setBody(this.buildServiceMethodBody(method));
			this.clazz.addMethod(method);
		}
	}
	
	private String buildServiceMethodBody(MethodMeta method) {
		StringBuilder b = new StringBuilder();
		b.append(String.format("%s service = new %s(this.url);", method.getReturnType(), method.getReturnType()));
		b.append("\n" + CodeBuilderHelper.tabulation(2));
		
		if (!method.getParameters().isEmpty()) {
			for (FieldMeta param : method.getParameters()) {
				b.append(String.format("service.set%s(%s);", StringUtils.capitalize(param.getName()), param.getName()));
				b.append("\n" + CodeBuilderHelper.tabulation(2));
			}
		}
		
		b.append("\n" + CodeBuilderHelper.tabulation(2));
		return b.append("return service;").toString();
	}

	private void addHttpAccessMethodsToClass(String pkgModel, ServiceMeta service) {
		for (ActionMeta action : service.getActions()) {
			MethodMeta method = new MethodMeta();
			method.setName(action.getMethod().name().toLowerCase());
			
			if (CodeBuilderHelper.stringToClass(service.getType()) == null) {
				method.setReturnType(pkgModel + "." + service.getType());
			} else {
				method.setReturnType(service.getType());
			}
			
			if (service.getGenericType() != null && CodeBuilderHelper.stringToClass(service.getGenericType()) == null) {
				method.setGenericReturnType(pkgModel + "." + service.getGenericType());
			} else {
				method.setGenericReturnType(service.getGenericType());
			}
			
			if (method.getName().equals("delete")) {
				FieldMeta param = new FieldMeta();
				param.setName("id");
				param.setType(String.class.getName());
				
				method.addParameter(param);
			} else if (method.getName().equals("post") || method.getName().equals("put") || method.getName().equals("patch")) {
				FieldMeta param = new FieldMeta();
				param.setName("entityResource");
				param.setType((method.getGenericReturnType() == null) ? method.getReturnType() : method.getGenericReturnType());
				
				method.addParameter(param);
			}
			
			method.setVisibility(Visibility.PUBLIC);
			method.setBody("throw new UnsupportedOperationException(\"Method not implemented yet\");");
			
			this.clazz.addMethod(method);
		}
	}
	
	public ClassMeta getClazz() {
		return clazz;
	}
	
	public ServiceBuilder withClazz(ClassMeta clazz) {
		this.clazz = clazz;
		return this;
	}
}