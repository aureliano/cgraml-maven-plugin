package com.github.aureliano.srvraml.code.builder;

import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;

import com.github.aureliano.srvraml.code.meta.ActionMeta;
import com.github.aureliano.srvraml.code.meta.ClassMeta;
import com.github.aureliano.srvraml.code.meta.FieldMeta;
import com.github.aureliano.srvraml.code.meta.MethodMeta;
import com.github.aureliano.srvraml.code.meta.ServiceMeta;
import com.github.aureliano.srvraml.code.meta.Visibility;
import com.github.aureliano.srvraml.helper.CodeBuilderHelper;

public class ServiceBuilder implements IBuilder {

	private ClassMeta clazz;
	private static final Set<String> GENERATED_CLASSES = new HashSet<String>();
	
	public ServiceBuilder() {
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceBuilder parse(String pkg, String entity, Object resource) {
		ServiceMeta service = (ServiceMeta) resource;
		this.clazz = new ClassMeta()
			.withPackageName(pkg + ".service")
			.withJavaDoc("Generated by srvraml-maven-plugin.")
			.withClassName(this.sanitizedTypeName(service.getUri()) + "Service");
		
		if (GENERATED_CLASSES.contains(this.clazz.getCanonicalClassName())) {
			throw new IllegalArgumentException("Class " + this.clazz.getCanonicalClassName() + " was already generated before. Skipping!");
		}
		
		this.addUrlAttributeToClass();
		this.addAttributeToClassIfParameterizedResource(service);
		
		for (ActionMeta action : service.getActions()) {
			for (FieldMeta field: action.getParameters()) {
				field.setVisibility(Visibility.PRIVATE);
				this.clazz.addField(field);
			}
		}
		
		this.addServiceMethodsToClass(service);
		
		for (ActionMeta action : service.getActions()) {
			MethodMeta method = new MethodMeta();
			method.setName(action.getMethod().name().toLowerCase());
			method.setReturnType("Object");
			method.setVisibility(Visibility.PUBLIC);
			
			this.clazz.addMethod(method);
		}
		
		GENERATED_CLASSES.add(this.clazz.getCanonicalClassName());
		return this;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceBuilder build() {
		return this;
	}
	
	private void addUrlAttributeToClass() {
		FieldMeta field = new FieldMeta();
		field.setName("url");
		field.setType(String.class.getName());
		field.setVisibility(Visibility.PRIVATE);
		
		this.clazz.addField(field);
		this.clazz.addMethod(CodeBuilderHelper.createGetterMethod(field));
	}
	
	private void addAttributeToClassIfParameterizedResource(ServiceMeta service) {
		Matcher matcher = Pattern.compile("/?\\{[\\w\\d]+\\}$").matcher(service.getUri());
		if (!matcher.find()) {
			return;
		}
		
		FieldMeta field = new FieldMeta();
		String name = this.sanitizedTypeName(service.getUri());
		name = name.substring(0, 1).toLowerCase() + name.substring(1);
		
		field.setName(name);
		field.setType(String.class.getName());
		field.setVisibility(Visibility.PRIVATE);
		
		this.clazz.addField(field);
		
		this.clazz.addMethod(CodeBuilderHelper.createSetterMethod(field));
		this.clazz.addMethod(CodeBuilderHelper.createGetterMethod(field));
	}

	private void addServiceMethodsToClass(ServiceMeta service) {
		if (service.getNextServices().isEmpty()) {
			return;
		}
		
		for (ServiceMeta s : service.getNextServices()) {
			MethodMeta method = new MethodMeta();
			
			String name = this.sanitizedTypeName(s.getUri());
			method.setReturnType(name);
			name = name.substring(0, 1).toLowerCase() + name.substring(1);
			method.setName(name);
			
			this.clazz.addMethod(method);
		}
	}
	
	private String sanitizedTypeName(String entity) {
		if (StringUtils.isEmpty(entity)) {
			return null;
		}
		
		entity = entity.replaceAll("[{}]*", "");
		return StringUtils.capitalize(entity.substring(entity.lastIndexOf("/") + 1));
	}
	
	public ClassMeta getClazz() {
		return clazz;
	}
	
	public ServiceBuilder withClazz(ClassMeta clazz) {
		this.clazz = clazz;
		return this;
	}
}