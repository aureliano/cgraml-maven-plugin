package com.github.aureliano.srvraml.code.builder;

import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.raml.model.Resource;

import com.github.aureliano.srvraml.code.meta.ClassMeta;
import com.github.aureliano.srvraml.code.meta.FieldMeta;
import com.github.aureliano.srvraml.code.meta.ServiceMeta;
import com.github.aureliano.srvraml.code.meta.Visibility;
import com.github.aureliano.srvraml.helper.RamlHelper;

public class ServiceBuilder implements IBuilder {

	private ClassMeta clazz;
	
	public ServiceBuilder() {
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public ServiceBuilder parse(String pkg, String entity, Object resource) {
		this.clazz = new ClassMeta()
			.withPackageName(pkg + ".service")
			.withJavaDoc("Generated by srvraml-maven-plugin.")
			.withClassName(StringUtils.capitalize(this.sanitizedTypeName(entity)) + "Service");
		
		Map<String, Resource> resources = ((Resource) resource).getResources();
		for (Resource rs : resources.values()) {
			ServiceMeta service = RamlHelper.resourceToService(rs);
			FieldMeta field = new FieldMeta();
			
			// TODO: Is parameter field?
			field.setName(this.sanitizedTypeName(service.getUri()));
			field.setType(service.getType());
			field.setGenericType(service.getGenericType());
			field.setVisibility(Visibility.PRIVATE);
			
			this.clazz.addField(field);
		}
		System.out.println(this.clazz);
		return this;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ServiceBuilder build() {
		return this;
	}
	
	private String sanitizedTypeName(String entity) {
		return entity.substring(entity.lastIndexOf("/") + 1);
	}
	
	public ClassMeta getClazz() {
		return clazz;
	}
	
	public ServiceBuilder withClazz(ClassMeta clazz) {
		this.clazz = clazz;
		return this;
	}
}